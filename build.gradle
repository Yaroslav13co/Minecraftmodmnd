buildscript{

    ext{

        getArcHash = {

            return new Properties().with{ p -> p.load(file('gradle.properties').newReader()); return p }["archash"]

        }

        arcHash = getArcHash()

    }

    

    repositories{

        mavenLocal()

        mavenCentral()

        google()

        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }

        maven{ url 'https://jitpack.io' }

    }

    dependencies{

        classpath "com.github.Anuken.Arc:packer:$arcHash"

        classpath "com.github.Anuken.Arc:arc-core:$arcHash"

    }

}

plugins{

    id "org.jetbrains.kotlin.jvm" version "1.6.0"

    id "org.jetbrains.kotlin.kapt" version "1.6.0"

}

allprojects{

    apply plugin: 'maven-publish'

    

    version = project.hasProperty("packageVersion") ? project.getProperty("packageVersion") : 'release'



    ext{
        generateLocales = {

            def output = 'en\n'

            def bundles = new File('assets/bundles/')

            bundles.listFiles().each{ other ->

                if(other.name == "bundle.properties") return

                output += other.name.substring("bundle".length() + 1, other.name.lastIndexOf('.')) + "\n"

            }

            new File('assets/locales').text = output

        generateLocales = {

            def output = 'en\n'

            def bundles = new File('assets/bundles/')

            bundles.listFiles().each{ other ->

                if(other.name == "bundle.properties") return

                output += other.name.substring("bundle".length() + 1, other.name.lastIndexOf('.')) + "\n"

            }

            new File('assets/locales').text = output

}} 
plugins {
    id 'java'
}

group pGroup

sourceSets.main {
    java.srcDir("src/")
    resources.srcDir("assets/")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "com.github.Anuken.Mindustry:core:$pMindustryVersion"
}

        
jar {
    archiveFileName.set pArtifactFilename
}

task dexify(type: Jar) {
    archiveName "dexed-$pArtifactFilename"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, pArtifactFilename),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")
    doFirst {
        exec {
            workingDir dexedArtifact.parent

            // Get Android SDK paths and validate
            String androidSdk = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
            if (!(androidSdk && new File(androidSdk).exists())) {
                throw new GradleException("Set ANDROID_HOME or ANDROID_SDK_ROOT environment variables to a valid Android SDK.")
            }

            File platforms = new File(androidSdk, "platforms/")
            if (!(platforms.exists() && platforms.isDirectory())) {
                throw new GradleException("Could not find directory '${platforms.getAbsolutePath()}'." +
                        " Ensure an Android SDK is installed.")
            }

            File androidJar = new File(project.hasProperty("pAndroidSdkVersion") ?
                    new File(platforms, project.property("pAndroidSdkVersion") as String) :
                    platforms.listFiles().reverse().find
                            { it.isDirectory() && new File(it, "android.jar").exists() },
                    "android.jar")
            if (!(androidJar && androidJar.exists())) {
                throw new GradleException("Could not find 'android.jar' in '${platforms.getAbsolutePath()}'." +
                        " If there is, specify valid 'pAndroidSdkVersion' in 'gradle.properties'")
            }


            // Assemble d8 invocation
            List<File> files = configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [androidJar]
            List<String> command = ["d8", "--min-api", pMinApi,
                                    *files.collect { ["--classpath", it.path] }.flatten(),
                                    "--output", dexedArtifact, jarArtifact]

            // Awaken d8
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
                commandLine("cmd", "/c", *command)
            else
                commandLine(*command)
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"
