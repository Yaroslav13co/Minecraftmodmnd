
sourceSets.main.java.srcDirs = ["src/"]

import arc.files.Fi
import arc.files.ZipFi
import arc.func.Func2
import arc.graphics.Color
import arc.graphics.Pixmap
import arc.packer.TexturePacker
import arc.struct.ObjectMap
import arc.struct.OrderedMap
import arc.struct.Seq
import arc.util.Http
import arc.util.Log
import arc.util.OS
import arc.util.Threads
import arc.util.io.PropertiesUtils
import arc.util.io.Streams

import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors




@groovy.transform.CompileStatic
static int getRGB(Pixmap image, int ix, int iy) {
    return image.getRaw(Math.max(Math.min(ix, image.width - 1), 0), Math.max(Math.min(iy, image.height - 1), 0))
}

@groovy.transform.CompileStatic
static void antialias(File file){
    Pixmap image = new Pixmap(new Fi(file))
    Pixmap out = image.copy()

    Color color = new Color()
    Color sum = new Color()
    Color suma = new Color()
    int[] p = new int[9]

task updateBundles{
    doLast{
        def uniEscape = { String string ->
            StringBuilder outBuffer = new StringBuilder()
            int len = string.length()
            for(int i = 0; i < len; i++){
                char ch = string.charAt(i)
                if((ch > 61) && (ch < 127)){
                    outBuffer.append(ch == (char)'\\' ? "\\\\" : ch)
                    continue
                }

                if(ch >= 0xE000 && ch <= 0xF8FF){
                    String hex = Integer.toHexString((int)ch)
                    outBuffer.append("\\u")
                    for(int j = 0; j < 4 - hex.length(); j++){
                        outBuffer.append('0')
                    }
                    outBuffer.append(hex)
                }else{
                    outBuffer.append(ch)
                }
            }

            return outBuffer.toString()
        }

        OrderedMap<String, String> base = new OrderedMap<>()
        PropertiesUtils.load(base, Fi.get("core/assets/bundles/bundle.properties").reader())
        Seq<String> removals = new Seq<>()

        Log.info("Updating bundles...")

        Fi.get("assets/bundles").walk(child -> {
            if(child.name().equals("bundle.properties") || child.toString().contains("output")) return

            Log.info("| @", child.nameWithoutExtension())

            OrderedMap<String, String> other = new OrderedMap<>()

            //find the last known comment of each line
            ObjectMap<String, String> comments = new ObjectMap<>()
            StringBuilder curComment = new StringBuilder()

            for(String line : Seq.with(child.readString().split("\n", -1))){
                if(line.startsWith("#") || line.isEmpty()){
                    curComment.append(line).append("\n")
                }else if(line.contains("=")){
                    String lastKey = line.substring(0, line.indexOf("=")).trim()
                    if(curComment.length() != 0){
                        comments.put(lastKey, curComment.toString())
                        curComment.setLength(0)
                    }
                }
            }

            ObjectMap<String, String> extras = new OrderedMap<>()
            PropertiesUtils.load(other, child.reader())
            removals.clear()

            for(String key : other.orderedKeys()){
                if(!base.containsKey(key) && key.contains(".details") && false){
                    extras.put(key, other.get(key))
                }else if(!base.containsKey(key)){
                    removals.add(key)
                    Log.info("&lr- Removing unused key '@'...", key)
                }
            }
            if(removals.size > 0) Log.info("&lr@ keys removed.", removals.size)
            for(String s : removals){
                other.remove(s)
            }

            int added = 0

            for(String key : base.orderedKeys()){
                if(other.get(key) == null || other.get(key).trim().isEmpty()){
                    other.put(key, base.get(key))
                    added++
                    Log.info("&lc- Adding missing key '@'...", key)
                }
            }

            Func2<String, String, String> processor = (key, value) ->
                    (comments.containsKey(key) ? comments.get(key) : "") + //append last known comment if present
                            (key + " =" + (value.trim().isEmpty() ? "" : " ") + uniEscape(value)).replace("\n", "\\n") + "\n"
            Fi output = child.sibling("output/" + child.name())

            if(added > 0) Log.info("&lc@ keys added.", added)
            if(removals.size + added > 0) Log.info("Writing bundle to @", output)
            StringBuilder result = new StringBuilder()

            //add everything ordered
            for(String key : base.orderedKeys().copy().add(extras.keys().toSeq())){
                if(other.get(key) == null) continue

                result.append(processor.get(key, other.get(key)))
                other.remove(key)
            }

            child.writeString(result.toString())
        })
    }
}
